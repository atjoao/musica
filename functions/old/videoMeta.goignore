package functions

import (
	"fmt"
	"io"
	"tremoco/server/utils"
	"net/http"
	"net/url"
	"regexp"
	"strings"
)

func VideoMeta(videoId string, includeVideo bool) ([]utils.VideoMeta, error) {
	metas := make([]utils.VideoMeta, 0)
	const ytUrl string = "https://www.youtube.com/watch"

	parseUrl, err := url.Parse(ytUrl)

	if err != nil {
		return nil, err
	}

	values := parseUrl.Query()
	values.Add("v", videoId)

	parseUrl.RawQuery = values.Encode()

	res, err := http.Get(parseUrl.String())
	if err != nil {
		return nil, err
	}

	defer res.Body.Close()

	body, err := io.ReadAll(res.Body)
	if err != nil {
		return nil, err
	}

	// refazer video meta todo ig

	// 1. fazer post request com video id
	// 2. encontrar se link tem signatureCipher ou url
	// 3. se url dar o link normal deixo estar
	// 4. signaturecipher -> post request com getSignatureStamp -> obeter link -> desencriptar link -> mostrar link trocado. 
	// como? ent troco a lista de metas em vez de deixar de fazer append a videoMeta retorno outro com o link normal 
	// alias match[2] deve de ajudar nisso..

	// just fake android at this point

	ytRe := regexp.MustCompile(`"audioQuality":"([^"]*)".*?"(?:signatureCipher|url)":"([^"]*)".*?"mimeType":"(audio|video)/webm; codecs=\\\"([^\\\"]*)`)
	findsig := regexp.MustCompile(`^[sS=]{2}`)

	matches := ytRe.FindAllStringSubmatch(string(body), -1)

	for _, match := range matches {
		// should i just move to piped

		encodedUrl, err := url.QueryUnescape(match[2])
		if err != nil {
			fmt.Println(err)
		}

		match[2] = strings.Replace(encodedUrl, "\\u0026", "&", -1)

		if findsig.MatchString(match[2]){
			match[2] = "sig url > "+ match[2]
		} else {
			match[2] = strings.Replace(encodedUrl, "\\u0026", "&", -1)
		}

		if !includeVideo && match[3] == "video"{
			continue
		}

		videoMeta := &utils.VideoMeta{
			AudioQuality: match[1],
			StreamUrl:    match[2],
			MimeType:     match[3],
			VideoCodec:   match[4],
		}

		metas = append(metas, *videoMeta)

	}
	return metas, nil
}
